// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Naklinet.Repository.Context;

namespace Naklinet.Repository.Migrations
{
    [DbContext(typeof(NaklinetDbContext))]
    [Migration("20201130204535_m5")]
    partial class m5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Naklinet.Domain.Entities.Comments", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Check")
                        .HasColumnType("bit");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("ReservationID")
                        .HasColumnType("int");

                    b.Property<int>("ShipperID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("ReservationID")
                        .IsUnique();

                    b.HasIndex("ShipperID");

                    b.ToTable("COMMENTS");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Check = true,
                            Comment = "Hasarsız taşındı eşyalarım fakat iletişim zayıf",
                            CommentDate = new DateTime(2020, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerID = 1,
                            ReservationID = 1,
                            ShipperID = 1
                        });
                });

            modelBuilder.Entity("Naklinet.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LeftStep")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(14)")
                        .HasMaxLength(14);

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.HasKey("ID");

                    b.ToTable("CUSTOMER");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Fatih",
                            Phone = "05322716155",
                            Surname = "Balcıoğlu"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Yunus",
                            Phone = "05321111111",
                            Surname = "Gülbeyen"
                        });
                });

            modelBuilder.Entity("Naklinet.Domain.Entities.DocumentTypes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("DOCUMENTTYPES");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            TypeName = "İmza Sürküsü"
                        },
                        new
                        {
                            ID = 2,
                            TypeName = "Vergi Levhası"
                        });
                });

            modelBuilder.Entity("Naklinet.Domain.Entities.Documents", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShipperID")
                        .HasColumnType("int");

                    b.Property<int>("TypeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ShipperID");

                    b.HasIndex("TypeID");

                    b.ToTable("DOCUMENTS");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "İmza Sürküsü - 1",
                            ShipperID = 1,
                            TypeID = 1
                        },
                        new
                        {
                            ID = 2,
                            Name = "Vergi Levhası - 1",
                            ShipperID = 1,
                            TypeID = 2
                        },
                        new
                        {
                            ID = 3,
                            Name = "Vergi Levhası",
                            ShipperID = 2,
                            TypeID = 2
                        });
                });

            modelBuilder.Entity("Naklinet.Domain.Entities.Employees", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(14)")
                        .HasMaxLength(14);

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<int>("ShipperID")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.HasIndex("ShipperID");

                    b.ToTable("EMPLOYEES");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Çalışan 1",
                            Phone = "05363403660",
                            RoleID = 3,
                            ShipperID = 1,
                            Surname = "Çalışan 1 Soyad"
                        },
                        new
                        {
                            ID = 2,
                            Email = "test@gmail.com",
                            Name = "Yönetici",
                            Phone = "05353563535",
                            RoleID = 1,
                            ShipperID = 1,
                            Surname = "Yönetici Soyad"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Sürücü 1",
                            Phone = "05363403660",
                            RoleID = 2,
                            ShipperID = 1,
                            Surname = "Sürücü 1 Soyad"
                        },
                        new
                        {
                            ID = 4,
                            Name = "Çalışan 2",
                            Phone = "05363403660",
                            RoleID = 3,
                            ShipperID = 1,
                            Surname = "Çalışan 2 Soyad"
                        },
                        new
                        {
                            ID = 5,
                            Name = "Yönetici 2. Nakliyeci",
                            Phone = "05363403660",
                            RoleID = 1,
                            ShipperID = 2,
                            Surname = "Yönetici Soyad"
                        });
                });

            modelBuilder.Entity("Naklinet.Domain.Entities.Factors", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("FloorFactor")
                        .HasColumnType("float");

                    b.Property<double>("MobileElevatorFactor")
                        .HasColumnType("float");

                    b.Property<double>("MobileElevatorIncrease")
                        .HasColumnType("float");

                    b.Property<double>("MontageFactor")
                        .HasColumnType("float");

                    b.Property<double>("RoomCountFactor")
                        .HasColumnType("float");

                    b.Property<double>("WayFactor")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.ToTable("FACTORS");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            FloorFactor = 100.0,
                            MobileElevatorFactor = 350.0,
                            MobileElevatorIncrease = 1.2,
                            MontageFactor = 150.0,
                            RoomCountFactor = 120.0,
                            WayFactor = 3.0
                        });
                });

            modelBuilder.Entity("Naklinet.Domain.Entities.FromAddresses", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<bool>("Elevator")
                        .HasColumnType("bit");

                    b.Property<int>("Floor")
                        .HasColumnType("int")
                        .HasMaxLength(20);

                    b.Property<int>("ReservationID")
                        .HasColumnType("int");

                    b.Property<int>("RoomCountID")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ReservationID")
                        .IsUnique();

                    b.HasIndex("RoomCountID");

                    b.ToTable("FROMADDRESSES");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            City = "Istanbul",
                            District = "Sancaktepe",
                            Elevator = false,
                            Floor = 3,
                            ReservationID = 1,
                            RoomCountID = 2,
                            State = "Osmangazi"
                        },
                        new
                        {
                            ID = 2,
                            City = "Istanbul",
                            District = "Pendik",
                            Elevator = true,
                            Floor = 2,
                            ReservationID = 2,
                            RoomCountID = 2,
                            State = "Kurtköy"
                        });
                });

            modelBuilder.Entity("Naklinet.Domain.Entities.MobileElevator", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OpitonText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("MOBILEELEVATOR");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            OpitonText = "Sadece Eski Evimde İstiyorum",
                            Price = 200.0,
                            Text = "from"
                        },
                        new
                        {
                            ID = 2,
                            OpitonText = "Sadece Yeni Evimde İstiyorum",
                            Price = 200.0,
                            Text = "to"
                        },
                        new
                        {
                            ID = 3,
                            OpitonText = "Her İki Evimde İstiyorum",
                            Price = 400.0,
                            Text = "both"
                        },
                        new
                        {
                            ID = 4,
                            OpitonText = "Mobil Asansör İstemiyorum",
                            Price = 0.0,
                            Text = "no"
                        });
                });

            modelBuilder.Entity("Naklinet.Domain.Entities.PackagingOptions", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("OptionFactor")
                        .HasColumnType("float");

                    b.Property<string>("OptionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("PACKAGINGOPTIONS");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            OptionFactor = 1.7,
                            OptionName = "Bütün Eşyalar"
                        },
                        new
                        {
                            ID = 2,
                            OptionFactor = 1.3,
                            OptionName = "Sadece Beyaz Eşyalar"
                        },
                        new
                        {
                            ID = 3,
                            OptionFactor = 0.0,
                            OptionName = "Kendim Paketleyeceğim"
                        });
                });

            modelBuilder.Entity("Naklinet.Domain.Entities.Points", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cominication")
                        .HasColumnType("int")
                        .HasMaxLength(10);

                    b.Property<int>("Contentment")
                        .HasColumnType("int")
                        .HasMaxLength(10);

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PointDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReservationID")
                        .HasColumnType("int");

                    b.Property<int>("ShipperID")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int")
                        .HasMaxLength(10);

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("ReservationID")
                        .IsUnique();

                    b.HasIndex("ShipperID");

                    b.ToTable("POINTS");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Cominication = 5,
                            Contentment = 8,
                            CustomerID = 1,
                            PointDate = new DateTime(2020, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationID = 1,
                            ShipperID = 1,
                            Time = 9
                        });
                });

            modelBuilder.Entity("Naklinet.Domain.Entities.ReservationStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("RESERVATIONSTATUS");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            StatusName = "Onay Bekliyor"
                        },
                        new
                        {
                            ID = 2,
                            StatusName = "Onaylandı"
                        },
                        new
                        {
                            ID = 3,
                            StatusName = "Taşıma Durumunda"
                        },
                        new
                        {
                            ID = 4,
                            StatusName = "Tamamlandı"
                        });
                });

            modelBuilder.Entity("Naklinet.Domain.Entities.Reservations", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("DriverID")
                        .HasColumnType("int");

                    b.Property<bool>("Montage")
                        .HasColumnType("bit");

                    b.Property<int>("PackagingOptionID")
                        .HasColumnType("int");

                    b.Property<double>("PriceToCustomer")
                        .HasColumnType("float");

                    b.Property<double>("PriceToShipper")
                        .HasColumnType("float");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShipperID")
                        .HasColumnType("int");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransportDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("DriverID");

                    b.HasIndex("PackagingOptionID");

                    b.HasIndex("ShipperID");

                    b.HasIndex("StatusID");

                    b.ToTable("RESERVATIONS");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerID = 1,
                            DriverID = 3,
                            Montage = true,
                            PackagingOptionID = 1,
                            PriceToCustomer = 2200.0,
                            PriceToShipper = 1900.0,
                            ReservationDate = new DateTime(2020, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShipperID = 1,
                            StatusID = 4,
                            TransportDate = new DateTime(2020, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 2,
                            CreatedDate = new DateTime(2020, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerID = 2,
                            DriverID = 3,
                            Montage = false,
                            PackagingOptionID = 1,
                            PriceToCustomer = 1700.0,
                            PriceToShipper = 1500.0,
                            ReservationDate = new DateTime(2020, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShipperID = 1,
                            StatusID = 4,
                            TransportDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Naklinet.Domain.Entities.Roles", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Yönetici"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Sürücü"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Çalışan"
                        });
                });

            modelBuilder.Entity("Naklinet.Domain.Entities.RoomCount", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Count")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("I")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("ROOMCOUNT");

                    b.HasData(
                        new
                        {
                            ID = 5,
                            Count = "1+0",
                            I = 1
                        },
                        new
                        {
                            ID = 1,
                            Count = "1+1",
                            I = 2
                        },
                        new
                        {
                            ID = 2,
                            Count = "2+1",
                            I = 3
                        });
                });

            modelBuilder.Entity("Naklinet.Domain.Entities.Shippers", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(14)")
                        .HasMaxLength(14);

                    b.Property<DateTime>("FoundingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(14)")
                        .HasMaxLength(14);

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TaxAuthority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("SHIPPERS");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Address = "Test Nakliyeci Adres 1",
                            CreatedDate = new DateTime(2020, 11, 30, 23, 45, 34, 776, DateTimeKind.Local).AddTicks(9983),
                            FoundingDate = new DateTime(2011, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Test Nakliyeci Adı 1",
                            Phone = "05363403660",
                            Status = true,
                            TaxAuthority = "Samandıra",
                            TaxNumber = "124124123"
                        },
                        new
                        {
                            ID = 2,
                            Address = "Test Nakliyeci Adres 2",
                            CreatedDate = new DateTime(2020, 11, 30, 23, 45, 34, 777, DateTimeKind.Local).AddTicks(5209),
                            FoundingDate = new DateTime(2012, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Test Nakliyeci Adı 2",
                            Phone = "05322322525",
                            Status = false
                        });
                });

            modelBuilder.Entity("Naklinet.Domain.Entities.StepExplanation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Explanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StepI")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("STEPEXPLANATION");
                });

            modelBuilder.Entity("Naklinet.Domain.Entities.ToAddresses", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<bool>("Elevator")
                        .HasColumnType("bit");

                    b.Property<int>("Floor")
                        .HasColumnType("int")
                        .HasMaxLength(20);

                    b.Property<int>("ReservationID")
                        .HasColumnType("int");

                    b.Property<int>("RoomCountID")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ReservationID")
                        .IsUnique();

                    b.HasIndex("RoomCountID");

                    b.ToTable("TOADDRESSES");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            City = "Istanbul",
                            District = "Maltepe",
                            Elevator = true,
                            Floor = 3,
                            ReservationID = 1,
                            RoomCountID = 2,
                            State = "Altayçeşme"
                        },
                        new
                        {
                            ID = 2,
                            City = "Istanbul",
                            District = "Üsküdar",
                            Elevator = true,
                            Floor = 1,
                            ReservationID = 2,
                            RoomCountID = 1,
                            State = "Kısıklı"
                        });
                });

            modelBuilder.Entity("Naklinet.Domain.Entities.VehicleTypes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("VEHICLETYPES");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            TypeName = "Kapalı Kasa"
                        },
                        new
                        {
                            ID = 2,
                            TypeName = "Açık Kasa"
                        });
                });

            modelBuilder.Entity("Naklinet.Domain.Entities.Vehicles", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("ShipperID")
                        .HasColumnType("int");

                    b.Property<int>("TypeID")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ShipperID");

                    b.HasIndex("TypeID");

                    b.ToTable("VEHICLES");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Height = 250,
                            LicensePlate = "06MNF20",
                            ShipperID = 1,
                            TypeID = 1,
                            Weight = 200
                        },
                        new
                        {
                            ID = 2,
                            Height = 180,
                            LicensePlate = "34GH7218",
                            ShipperID = 1,
                            TypeID = 2,
                            Weight = 130
                        },
                        new
                        {
                            ID = 3,
                            Height = 180,
                            LicensePlate = "34CRK350",
                            ShipperID = 2,
                            TypeID = 2,
                            Weight = 130
                        });
                });

            modelBuilder.Entity("Naklinet.Domain.Entities.Comments", b =>
                {
                    b.HasOne("Naklinet.Domain.Entities.Customer", "Customer")
                        .WithMany("Comments")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Naklinet.Domain.Entities.Reservations", "Reservation")
                        .WithOne("Comment")
                        .HasForeignKey("Naklinet.Domain.Entities.Comments", "ReservationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Naklinet.Domain.Entities.Shippers", "Shipper")
                        .WithMany("Comments")
                        .HasForeignKey("ShipperID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Naklinet.Domain.Entities.Documents", b =>
                {
                    b.HasOne("Naklinet.Domain.Entities.Shippers", "Shipper")
                        .WithMany("Documents")
                        .HasForeignKey("ShipperID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Naklinet.Domain.Entities.DocumentTypes", "DocumentType")
                        .WithMany("Documents")
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Naklinet.Domain.Entities.Employees", b =>
                {
                    b.HasOne("Naklinet.Domain.Entities.Roles", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Naklinet.Domain.Entities.Shippers", "Shipper")
                        .WithMany("Employees")
                        .HasForeignKey("ShipperID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Naklinet.Domain.Entities.FromAddresses", b =>
                {
                    b.HasOne("Naklinet.Domain.Entities.Reservations", "Reservation")
                        .WithOne("FromAddress")
                        .HasForeignKey("Naklinet.Domain.Entities.FromAddresses", "ReservationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Naklinet.Domain.Entities.RoomCount", "RoomCount")
                        .WithMany("FromAddresses")
                        .HasForeignKey("RoomCountID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Naklinet.Domain.Entities.Points", b =>
                {
                    b.HasOne("Naklinet.Domain.Entities.Customer", "Customer")
                        .WithMany("Points")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Naklinet.Domain.Entities.Reservations", "Reservation")
                        .WithOne("Point")
                        .HasForeignKey("Naklinet.Domain.Entities.Points", "ReservationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Naklinet.Domain.Entities.Shippers", "Shipper")
                        .WithMany("Points")
                        .HasForeignKey("ShipperID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Naklinet.Domain.Entities.Reservations", b =>
                {
                    b.HasOne("Naklinet.Domain.Entities.Customer", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Naklinet.Domain.Entities.Employees", "Driver")
                        .WithMany("ReservationDriver")
                        .HasForeignKey("DriverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Naklinet.Domain.Entities.PackagingOptions", "PackagingOption")
                        .WithMany("Reservations")
                        .HasForeignKey("PackagingOptionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Naklinet.Domain.Entities.Shippers", "Shipper")
                        .WithMany("Reservations")
                        .HasForeignKey("ShipperID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Naklinet.Domain.Entities.ReservationStatus", "ReservationStatus")
                        .WithMany("Reservations")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Naklinet.Domain.Entities.ToAddresses", b =>
                {
                    b.HasOne("Naklinet.Domain.Entities.Reservations", "Reservation")
                        .WithOne("ToAddress")
                        .HasForeignKey("Naklinet.Domain.Entities.ToAddresses", "ReservationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Naklinet.Domain.Entities.RoomCount", "RoomCount")
                        .WithMany("ToAddresses")
                        .HasForeignKey("RoomCountID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Naklinet.Domain.Entities.Vehicles", b =>
                {
                    b.HasOne("Naklinet.Domain.Entities.Shippers", "Shipper")
                        .WithMany("Vehicles")
                        .HasForeignKey("ShipperID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Naklinet.Domain.Entities.VehicleTypes", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
